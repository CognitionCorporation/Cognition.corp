{
  "name": "gulp-angular-embed-templates",
  "version": "2.3.0",
  "description": "gulp plugin to include the contents of angular templates inside directive's code",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/laxa1986/gulp-angular-embed-templates.git"
  },
  "keywords": [
    "gulpplugin",
    "gulp",
    "plugin",
    "angular",
    "embed",
    "include",
    "templates"
  ],
  "author": {
    "name": "Alexey Chekulaev",
    "email": "chekulaevalexey@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/laxa1986/gulp-angular-embed-templates/issues"
  },
  "homepage": "https://github.com/laxa1986/gulp-angular-embed-templates",
  "dependencies": {
    "gulp-util": "^3.0.6",
    "minimize": "^2.0.0",
    "through2": "^2.0.1",
    "htmlparser2": "~3.9.1",
    "object-assign": "4.1.0"
  },
  "devDependencies": {
    "mocha": "^3.0.2",
    "chai": "^3.5.0",
    "chai-string": "^1.2.0"
  },
  "files": [
    "package.json",
    "README.md",
    "CHANGELOG.md",
    "LICENSE",
    "index.js",
    "lib"
  ],
  "directories": {},
  "_npmVersion": "2.7.4",
  "_nodeVersion": "0.12.2",
  "readme": "# gulp-angular-embed-templates\n\n> gulp plugin to include the contents of angular templates inside directive's code\n\n----\n\nPlugin searches for `templateUrl: {template url}` and replace it with `template: {minified template content}`. To archive this template first minified with [minimize](https://www.npmjs.com/package/minimize)\n\nNearest neighbours are:\n\n*   *gulp-angular-templates* - good for single page applications, combine all templates in one module. *gulp-angular-embed-templates* is better for **multi page applications**, where different pages use different set of angular directives so combining all templates in one is not an option. For single page applications they are similar but *angular-inject-templates* doesn't forces you to change your code for using some additional module: just replace template reference with the template code.\n*   *gulp-include-file* - can be used for the same purpose (file include) with *minimize* plugin as transform functions. *gulp-angular-embed-templates* do all of this out of the box.\n\n## Versions / Release Notes\n\n[CHANGELOG on GitHub](https://github.com/laxa1986/gulp-angular-embed-templates/blob/master/CHANGELOG.md)\n\n## Install\n\n    npm install --save-dev gulp-angular-embed-templates\n\n## Usage (Angular 1.x)\n\nGiven the following file structure\n\n```javascript\nsrc\n+-hello-world\n  |-hello-world-directive.js\n  +-hello-world-template.html\n```\n\n`hello-world-directive.js`:\n\n```javascript\nangular.module('test').directive('helloWorld', function () {\n    return {\n        restrict: 'E',\n        // relative path to template\n        templateUrl: 'hello-world-template.html'\n    };\n});\n```\n\n`hello-world-template.html`:\n\n```html\n<strong>\n    Hello world!\n</strong>\n```\n\n`gulpfile.js`:\n\n```javascript\nvar gulp = require('gulp');\nvar embedTemplates = require('gulp-angular-embed-templates');\n\ngulp.task('js:build', function () {\n    gulp.src('src/scripts/**/*.js')\n        .pipe(embedTemplates())\n        .pipe(gulp.dest('./dist'));\n});\n```\n\n*gulp-angular-embed-templates* will generate the following file:\n\n```javascript\nangular.module('test').directive('helloWorld', function () {\n    return {\n        restrict: 'E',\n        template:'<strong>Hello world!</strong>'\n    };\n});\n```\n\n## Usage (Angular 2.0)\n\nGiven the following file structure\n\n```javascript\nsrc\n+-hello-world\n  |-hello-world-component.ts\n  +-hello-world-template.html\n```\n\n`hello-world-component.ts`:\n\n```javascript\nclass Component extends Directive {\n  restrict: string = \"E\";\n  controller: Controller;\n  controllerAs: string = \"vm\";\n  templateUrl: string = \"angular2-template.html\";\n}\n// or\n@View({\n    ...\n    templateUrl: 'angular2-template.html'\n})\n```\n\n`angular2-template.html`:\n\n```html\n<task-cmp [model]=\"task\" (complete)=\"onCmpl(task)\">\n    {{index}}\n</task-cmp>\n```\n\n`gulpfile.js`:\n\n```javascript\nvar gulp = require('gulp');\nvar embedTemplates = require('gulp-angular-embed-templates');\n\ngulp.task('js:build', function () {\n    gulp.src('src/scripts/**/*.ts') // also can use *.js files\n        .pipe(embedTemplates({sourceType:'ts'}))\n        .pipe(gulp.dest('./dist'));\n});\n```\n\n*gulp-angular-embed-templates* will generate the following file:\n\n```javascript\nclass Component extends Directive {\n  restrict: string = \"E\";\n  controller: Controller;\n  controllerAs: string = \"vm\";\n  template:string='<task-cmp [model]=\"task\" (complete)=\"onCmpl(task)\">{{index}}</task-cmp>';\n}\n// or\n@View({\n    ...\n    template:'<task-cmp [model]=\"task\" (complete)=\"onCmpl(task)\">{{index}}</task-cmp>'\n})\n```\n\n**Note**: call _embedTemplates_ before source maps initialization.\n\n## API\n\n### embedTemplates(options)\n\n#### options.sourceType\nType: `String`. Default value: 'js'. Available values:\n- 'js' both for Angular 1.x syntax `templateUrl: 'path'` and Angular 2.x syntax `@View({templateUrl: 'path'})`\n- 'ts' additionally support Angular 2.x TypeScript syntax `class Component {templateUrl: string = 'path'}`\n\n#### options.basePath\nType: `String`. By default plugin use path specified in 'templateUrl' as a relative path to corresponding '.js' file (file with 'templateUrl'). This option allow to specify another basePath to search templates as 'basePath'+'templateUrl'\n\n#### skip one template embedding\nThe easiest way to skip one concrete is just add some comment like `/*!*/` between templateUrl and template path, like this: `templateUrl: /*!*/ '/template-path.html'`\n\n#### options.skipFiles\nType: `RegExp` or `Function`. By default: do not skip any files. RegExp can test file name to skip template embedding, but this file still be passed in general gulp pipe and be visible for all follow plugins. Function can be used for more detail filtering. Example: `function(file) {return file.path.endsWith('-skip-directive.js');}`\n\n#### options.skipTemplates\nType: `RegExp` or `Function`. By default: do not skip any templates. RegExp can test concrete templateUrl to skip it (like `/\\-large\\.html$/`). Function can be used for more detail filtering. Example: `function(templatePath, fileContext) {return templatePath.endsWith('-large.html');}`\n\n#### options.minimize\nType: `Object`. Default value: {parser: customParser}\n\nsettings to pass in minimize plugin. Please see all settings on [minimize official page](https://www.npmjs.com/package/minimize). Please don't specify key 'parser' because it already used for internal purposes\n\n#### options.skipErrors\nType: `Boolean`. Default value: 'false'\n\nshould plugin brake on errors (file not found, error in minification) or skip errors (warn in logs) and go to next template\n\n#### options.jsEncoding\nType: `String`. Default value: 'utf-8'\n\njs files encoding (angular directives)\n\n#### options.templateEncoding\nType: `String`. Default value: 'utf-8'\n\nangular template files encoding\n\n#### options.maxSize\nType: `Number`. Not specified by default (templates of any size allowed)\n\ndefine the max size limit in bytes for the template be embedded. Ignore templates which size exceed this limit\n\n## License\nThis module is released under the MIT license.\n\n\n",
  "readmeFilename": "README.md",
  "_id": "gulp-angular-embed-templates@2.3.0",
  "dist": {
    "shasum": "d9138fa52e7677a119c387b0f3482b9dcfe4e9fa"
  },
  "_from": "gulp-angular-embed-templates@",
  "_resolved": "https://registry.npmjs.org/gulp-angular-embed-templates/-/gulp-angular-embed-templates-2.3.0.tgz"
}
